https://www.guru99.com/ruby-on-rails-tutorial.html::ruby on rails tutorial for beginners with project & example skip to content home testing expand agile testing junit quality center(alm) bugzilla hp loadrunner rpa cucumber software testing sap testing database testing mobile testing selenium etl testing mantis soapui jmeter postman test management jira qtp testlink sap expand abap crm pi/po apo crystal reports pp beginners fico sd basis hana sapui5 bods hr security tutorial bi/bw mm solution manager bpc qm successfactors co payroll sap courses web expand apache java php sql server angularjs jsp pl/sql uml asp.net kotlin postgresql vb.net c linux python vbscript c# mariadb reactjs web services c++ ms access ruby & rails wpf codeigniter mysql scala sqlite dbms node.js sql perl javascript must learn expand accounting embedded systems operating system algorithms ethical hacking pmp android excel tutorial photoshop blockchain go programming project management business analyst iot reviews build website itil salesforce cloud computing jenkins seo cobol mis software engineering compiler design movie vba courses networking vpn big data expand aws hive power bi big data informatica qlikview cassandra microstrategy tableau cognos mongodb talend data warehousing nifi zookeeper devops obiee pentaho hbase live project expand live agile testing live selenium project live hp alm live selenium 2 live java project live security testing live mobile testing live testing project live payment gateway live testing 2 live php project live telecom live projects hub live uft/qtp testing live python project live seo project ai expand artificial intelligence pytorch data science r programming keras tensorflow nltk search toggle menu ruby on rails tutorial for beginners with project & example byjohn smith hours updatedoctober 29, 2022 what is ruby? ruby is a high-level, interpreted and object-oriented programming language. it is a dynamic open-source language that has a great community behind it. ruby was designed for simplicity and productivity. it encourages writing human first and computer second software code. it was created by yukihiro matsumoto in japan in 1995. what is rails? rails is a development framework written in ruby for building web applications. it was created as the foundation of basecamp application and then released as an open-source software in 2004. rails offers many in-built standard features and functionalities, which makes it a suitable option for mvp prototyping and development. it was created by david heinemeier hasson popularly known as dhh. it is one of the most influential and popular tools for building web applications. it is used by some of the favourite sites like airbnb, github, shopify, etc. in this ruby on rails tutorial for beginners, you will learn ruby on rails basics like: what is ruby? what is rails? why rails? how to install ruby on windows installing ruby on mac installing ruby on ubuntu (linux) two principles of rails rails – project file structures rails – generate commands rails – routing rails – views rails – activerecord, active record pattern, and orm rails – migrations rails – activerecord associations rails – activerecord validations rails – actioncontroller rails – configurations rails – debugging why rails? here are pros/ benefits of using rails: rails is packaged as a ruby gem, and you can use it to build a variety of applications. it allows you to build regular web applications, e-commerce applications, content management system, and more. rails is a full-stack framework that includes everything you need to create a database-driven web application, using the model-view-controller pattern. this means that all the layers are built to work seamlessly together with less code. it requires fewer lines of code than other frameworks. how to download and install ruby on windows the installation process will depend on your operating system. you will go through installing ruby on windows, mac, and linux. step 1) download rubyinstaller the easiest way to install ruby on your windows computer is through ruby installer which you can download at https://rubyinstaller.org/. all you have to do is run the downloaded installer. step 2) click on downloaded installer double-click on downloaded installer ‘rubyinstaller-2.4.1-2-x64.exe’. step 3) accept the license select the ‘i accept the license’ radio button and click the ‘next’ button. this should bring you to the next figure below: step 4) check first two checkboxes check the first two checkboxes to make running ruby scripts easier. click the ‘install’ button to get the installation started. you should see the figure below when the installation completes. step 5) click on finish do not uncheck the checkbox option that installs msys2. click “finish” to complete the installation and a command prompt window shown in the figure below will be displayed. step 6) installs msys2 this step installs msys2, a building platform that features a package manager for easy installation of packages on windows. press enter to install all the components as they are all required to have a smooth ruby on rails development environment to work with on windows. installing rails you should have ruby installed from the previous section, and now you are going to install rails. you can install rails using a package from railsinstaller, but the problem with this is that you don’t get the latest version of the required packages. if you have already have the latest ruby and a baseline set of required rubygems and extensions installed. all you need do now is run the following command at the command prompt to get rails on your system: ‘gem install rails.’ you will also need to install node.js if you don’t already have it because some libraries that rails depends on require a javascript runtime to work correctly. you can get node at https://nodejs.org. it is a more common and preferred approach to developing on windows. rails community uses a windows subsystem for linux that provides a gnu/linux environment with command-line tools, utilities, and common applications directly on windows. installing ruby on mac your mac already has ruby pre-installed on it. however, the pre-installed version might be old, and so you will need to install a new/latest version. the easiest way to do this is by using a package manager such as homebrew. you might first need to install homebrew by running the command below at the terminal. /usr/bin/ruby -e "$(curl -fssl https://raw.githubusercontent.com/homebrew/install/master/install) this will display a warning and ask you to enter your password. enter your mac password (you won’t see the characters as you type). just press ‘enter’ when you are done typing your password. then run this simple homebrew command to install ruby on your mac. brew install ruby and also run this command: echo "export path="/usr/local/bin:/usr/local/sbin:$path >> ~/.bash_profile to set this ruby installation as the default ruby to run on your system and not the pre-installed ruby. to confirm the installation was successful, you can run the following at the terminal ruby --version this will print the ruby version number you have installed. the output will look something like ruby 2.6.0p0 (2018-12-25 revision 66547) [x86_64-darwin18] installing ruby on ubuntu (linux) the easiest way to get ruby installed on your ubuntu system is through the apt package manager. you need to run the following commands at the terminal to install the latest ruby from ubuntu repositories. sudo apt update – this will update the default ubuntu repositories sudo apt install ruby-full – it will download and installs the latest ruby to confirm the installation was successful, you can run the following ‘ruby –version,’ this will print the ruby version you have installed. installing rails on ubuntu (linux) you should follow the steps below to successfully install rails on your linux machine. step 1) update your computer gem manager by running ‘gem update –system’ at the terminal or command prompt. step 2) run ‘gem install rails’ to install the latest version of rails on your computer. step 3) you should install bundler gem for easy rails application gem dependency management. run ‘gem install bundler’ to get it. two principles of rails rails follow basic software design principles and encourage you to use those principles too. the two most common are: don’t repeat yourself (dry) – this makes you write concise, consistent, and maintainable code. convention over configuration – rails is pre-configured to use sensible defaults that fit most common usage. this makes your application development fast, and you also have less code to maintain. rails – project file structures with rails now installed on your system lets create a rails application! we will learn ruby on rails examples and how to create a todo list application in this ruby on rails tutorial. run the following command ‘rails new todo_app’ in your terminal to create the application. this command creates a directory named ‘todo_app’ in the current directory with the basic folder structure of a rails web application, as shown in the figure below: you will go through the main directories in this ruby on rails example. app – this directory groups using different subdirectories for the ui/layout (views and helpers), the controller (controllers files) and the models (business/application logic). app/controllers – this directory stores controller files used by rails to handle requests from the client. app/assets – it contains static files, which is a need for the application’s front-end grouped into folders based on their type – javascript files, images, and stylesheets. app/helpers – this subdirectory contains helper functions that make your application model, view, and controller logic focused, small and uncluttered. app/models – this contains files that model your application’s database. the model classes make working with the database very easy. app/views – this hold template/layout files the user of your application interacts with. the templates are a combination of html and data from the database. bin – it contains rails scripts that starts your application. it can also include other scripts that you use to set up and upgrade the application. config – this holds configuration files – database.yml, environment.rb, routes.rb, etc. that your application needs to run. db – this directory contains files/scripts that are used to manage your application database. lib – this directory contains an extended module for your application. log – this contains log files – server.log, development.log, test.log, and production.log, etc., that are used for debugging or monitoring your application. public – this directory contains static files and compiled assets, such as html files, javascript files, images, and stylesheets. test – this directory holds test files you write to test your application functionality. tmp – this directory contains temporary files like cache and pid files. vendor – this directory contains third-party libraries. gemfile – this file specifies what your basic gem requirements are to run your web application. you can group the gems into development, test or production and rails will know when to include each gem. gemfile.lock – unlike the gemfile that explicitly lists the gems you want in your application, gemfile.lock additionally contains other gems that those you list in the gemfile depends on that are then automatically installed to satisfy the dependencies. readme.md – you use this file to share essential detail about your application, such as what the app does, how to go about installing and run the application. rakefile – this file contains various rake tasks definitions, which helps in automating everyday administration tasks of your application. config.ru – this is a rack configuration file that provides an interface to the webserver to start your application. change directory to the ‘todo_app’ directory rails generated and run ‘rails server’ to start the application. type localhost:3000 in the address bar of your web browser, you should see the figure below if all went well. this is the default homepage of your application, and you will change this in the later section of this ruby on rails tutorial. you can stop the server by pressing ‘ctrl-c’. rails – generate commands the rails generate command makes use of templates to create a whole lot of useful things in your application. you can use these generators to save a lot of time. it helps by writing boilerplate code, code that is necessary for your web application to work. you can run ‘rails generate’ by itself at the command prompt or terminal to see a list of available generators as shown below: you can also run ‘rails generate “command”‘ to see a description of what the command does. it offers convenient options that can be run with the command and usage example. the figure below shows the output of running‘ rails generate controller’: you will use the rails generate scaffold command to automatically create the model, view, and controller for the todo list application you are building. run‘ rails generate scaffold todo_list title:string description: text’ in your terminal (check you are still in the todo_app directory). this will create a full crud (create, read, update, and delete) web interface for the todolists table. another useful command to know is ‘rails destroy,’ it reverses whatever ‘rails generate…’ does. rails – routing the rails routing system, rails router, handles all incoming requests to your web application. it does this by examining the url of the incoming requests and then maps each request to the controller action responsible for handling it, using special syntax specified in the routes file (config/routes.rb). the routes file helps in controlling every url aspect of your web application. rails by default use a restful design based on the rest architectural style, that provides a mapping between http verbs and requests (urls) to controller actions. the routes file was generated when you ran ‘rails new’ in an earlier section of this tutorial. continuing with the todo application that you are building, run the following‘ rails db:migrate’ (you will get to know what this does shortly) in your command line, make sure you are still at the root of the application (the todo_app directory). then start the server again with ‘rails server’. type http://localhost:3000/todo_lists/ in your browser and press enter. you should get back a webpage as shown in the below figure of ruby on rails example: this is the todo lists view that the scaffold command generated and it is controlled by the todolistscontroller’s index action. go ahead and add a todo list by clicking on the ‘new todo list’ on the page, you should get the page as shown below: notice the url is changed to http://localhost:3000/todo_lists/new. this is the page to create a new todo list, and it is controlled by the todolistscontroller’s new method/action. enter your todo list title and description in the form and click the create todo list button, the url should change to http://localhost:3000/todo_lists/1, shown in the below figure of ruby on rails code example: this is the show page of a todo list, and it is controlled by the todolistscontroller’s show method/action. if you go back to http://localhost:3000/todo_lists/, you should now see the figure below with a new todo list added: rails was able to map the various requests (urls) to the corresponding todolistscontroller’s action using the route definition in config/routes.rb. if you take a peek at this file, you see a single line ‘resources: todo_lists’, is rails default way of writing restful routes. this single line creates seven routes all mapping to the todolists controller. by convention, each controller’s action also maps to a specific crud (create, read, update, and delete) operation in the database. you can run ‘rake routes’ in your command line to see the various routes available in your application. the figure below shows the output of running ‘rails routes’ in your command line/terminal. rails – views the view layer is one of the components of the mvc paradigm and is responsible for generating html response for each request to your application. rails by default use erb (embedded ruby) which is a powerful templating system for ruby. erb makes writing templates easy and maintainable by combining plain text with ruby code for variable substitution and flow control. an erb template has .html, .erb or .erb extension. you will mostly use a combination of two tag markers only, each of which causes the embedded code to be processed and handled in a particular way. a tag with an equal’s sign ‘<%= %>’ indicates that embedded code is an expression and that the result of the code should be substituted by the renderer when it renders the template. the other tag with no equals sign ‘<% %>’ indicates to the renderer that the result of the code should not be substituted/printed when it renders the template. each controller in your rails application has a corresponding subdirectory in app/views, and each action/method in a controller has a corresponding .html and .erb file in this directory. take a look at app/views of the todo app you are building. you will find a subdirectory named ‘todo_lists’ inside this subdirectory .html.erb files with names corresponding to the actions/methods in the todolists controller. rails – activerecord, active record pattern, and orm activerecord is the ruby implementation of the active record pattern, which is a simple pattern where a class represents a table, and an instance of the class represents a row in that class. activerecord is popularly referred to as an orm (object relational mapping), a technique that allows you to manage your database using a language you’re most comfortable with. it is database agnostic thus you can easily switch between databases (for example sqlite, mysql, postgresql, sql server, oracle, etc.). this suite more for your application requirement with the same code/logic. so, if you want to get an array containing a listing of all the todo lists in your application, so, instead of writing code to initiate a connection to the database, then doing some sort of sql select query, and converting those results into an array. for that, you just need to type ‘todolist.all’ and active record gives you the array filled with todolist objects that you can play with as you like. all you need do is set up the right configuration in config/database.yml, and active record will work out all the differences between the various database system. so when you switch from one to the other, you don’t have to think about it. you focus on writing code for your application, and active record will think about the low-level details of connecting you to your database. active record makes use of naming conventions to create the mapping between models and database tables. rails pluralize your model class names to find the corresponding database table. so, for a class todolist, activerecord will create a database table called todolists. rails – migrations rails migration is simply a script that you use to edit your application database. it is used to set up or change your database and avoids manually writing sql code to do that. it uses ruby to define changes to database schema and makes it possible to use version control to keep your database synchronized. rails migrations use a ruby domain specific language (dsl). this acts as an abstraction and makes it possible to use or change your database engine based on your requirements. they can be shared with anyone working on the application and can also be rolled back to undo any changes to the database. this is a high safety mechanism as you don’t have to bother about doing permanent damage to your database. rails – activerecord associations a connection between two activerecord models is known as an association. association makes it much easier to perform operations on the different records in your code. it can be divided into four categories: – one to one: – this indicates that a record contains precisely one instance of another model. a good example is user profile. a user has only one profile. it uses has _one keyword. one to many: – this is the most common association, and it indicates that one model has zero or more instances of another model. your use has a _many keyword to denote this association. many to many: – this association is a bit more complicated, and activerecord provides two ways to handle it. using the has_and_belongs_to_many and has_many, which gives you access to the relation that is defined in a separate table. polymorphic one to many:- this is a more advanced association available to you in rails. you can use it to define a model that may belong to many different models on a single association. rails – activerecord validations validation helps to ensure that you have correct data because working with wrong data is an awful thing and could cost you your money and business. validation also provides an extra layer of security for your application against malicious users from gaining access to information in your database. rails offer you a nice api of validation helpers in activerecord to keep your database clean, secure, and free of errors. activerecord validations run on model objects before saving to the database, making them more reliable and also best practice to follow in building your application. the following activerecord methods evoke validations when used or called on model objects – create, create!, save, save!, update, and update!. the ones with a bang (create!, save! and update!) raise an exception if a record is invalid while thothen’t’tt’t’t. the most common activerecord validation helpers at your disposal are:- confirmation:– this validation helper is useful for validating two fields have the same entry. e.g., password and password confirmation, it is used in conjunction with the presence validation helper. presence:– this checks that the field is not empty. uniqueness: ensures unique value for a field, e.g., username length:- to enforce a limit on character length of a field you can also create your custom validation by using the validate method and passing it the name of the custom validation method. you can check the model’s error object to find out why a validation. hopefully, you have some ideas to make your application more constrained and more secured to only allow secure data into your database. rails – actioncontroller the rails controller is the center of your web application. it facilitates and coordinates the communication between the user, the models, and the views. your controller classes inherit from the applicationcontroller, that contains code that can be run in all other controllers and it inherits from actioncontroller class. the controller provides the following to your application: it routes external requests to internal actions it manages to cache, giving performance boosts to your application it manages helper methods that extend view templates capabilities. it also manages user sessions, giving them a smooth experience using your app. rails – configurations you can configure the various components such as initializers, assets, generators, middlewares, etc. by using your rails application initializers and configuration files in the config directory. files like config/application.rb, config/environments/development.rb and config/environments/test.rb etc. you can also have custom settings configure for your application. rails – debugging as you build out your application, there will come a time you will need/have to debug your code. rails make this easy using the byebug gem. you can start a debugging session by putting the ‘byebeg’ keyword anywhere in your application code. this will temporarily stop execution at that point. the byebug gem gives you several commands to use. the most useful ones are: next: command that enables you to go to the next line of code, skipping all methods invoked by the execution of the current line. step: this is similar to ‘next’ command but will make you step into each invoked. break: this stops the code execution. continue continues execution code. there are other debugging gems available such as ‘pry’, and they all provide similar functionalities but slightly different syntax. debugging gems should not be used in production as this pose’s risks to your application and bad experience to your application users. there are log files that you can inspect for errors in production and handle them. also, you should follow a tdd (test-driven development) approach when developing your application to ensure everything works well before deploying to production. summary: ruby is a pure object-oriented programming language ruby has an elegant syntax that is both easy to read and write. rails is a development framework, written in ruby, for building web applications the installation process will depend on your operating system. rails is packaged as a ruby gem, and you can use it to build a variety of applications. you will create a todo list application in this tutorial, run the followincomm’n’n’ ‘rails netoda’p’p’p’ in your terminal to create the application. the rails generate command makes use of templates to create a whole lot of useful things in your application. the rails routing system, rails router helps you to handles all incoming requests to your web application. the view layer is one of the components of the mvc paradigm and is responsible for generating html response for each request to your application. activerecord is the ruby implementation of the active record pattern. rails migration is simply a script that you use to edit your application database. a connection between two activerecord models is known as an association. validation helps to ensure that you have correct data because working with wrong data is an awful thing and could cost you your money and business. the rails controller helps you to facilitates and coordinates the communication between the user, the models, and the views. rail helps you to configure the various components such as initializers, assets, generators, middlewares, etc. you might like: sap bpc – what is business planning and consolidation? wpf tutorial for beginners: how to create application [example] golang tutorial: learn go programming language for beginners apache nifi tutorial: what is nifi? architecture & installation postman tutorial – how to use for api testing? post navigation report a bug next continue top tutorials about about us advertise with us write for us contact us python testing hacking career suggestion sap career suggestion tool software testing as a career interesting ebook blog quiz sap ebook sap java sql execute online execute java online execute javascript execute html execute python selenium cryptocurrency vpns © copyright - guru99 2022 privacy policy | affiliate disclaimer | tos scroll to top home testingexpand child menu expand agile testing junit quality center(alm) bugzilla hp loadrunner rpa cucumber software testing sap testing database testing mobile testing selenium etl testing mantis soapui jmeter postman test management jira qtp testlink sapexpand child menu expand abap crm pi/po apo crystal reports pp beginners fico sd basis hana sapui5 bods hr security tutorial bi/bw mm solution manager bpc qm successfactors co payroll sap courses webexpand child menu expand apache java php sql server angularjs jsp pl/sql uml asp.net kotlin postgresql vb.net c linux python vbscript c# mariadb reactjs web services c++ ms access ruby & rails wpf codeigniter mysql scala sqlite dbms node.js sql perl javascript must learnexpand child menu expand accounting embedded systems operating system algorithms ethical hacking pmp android excel tutorial photoshop blockchain go programming project management business analyst iot reviews build website itil salesforce cloud computing jenkins seo cobol mis software engineering compiler design movie vba courses networking vpn big dataexpand child menu expand aws hive power bi big data informatica qlikview cassandra microstrategy tableau cognos mongodb talend data warehousing nifi zookeeper devops obiee pentaho hbase live projectexpand child menu expand live agile testing live selenium project live hp alm live selenium 2 live java project live security testing live mobile testing live testing project live payment gateway live testing 2 live php project live telecom live projects hub live uft/qtp testing live python project live seo project aiexpand child menu expand artificial intelligence pytorch data science r programming keras tensorflow nltk toggle menu close search for: search
