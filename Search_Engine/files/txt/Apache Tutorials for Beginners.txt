https://www.guru99.com/apache.html::apache tutorials for beginners skip to content home testing expand agile testing junit quality center(alm) bugzilla hp loadrunner rpa cucumber software testing sap testing database testing mobile testing selenium etl testing mantis soapui jmeter postman test management jira qtp testlink sap expand abap crm pi/po apo crystal reports pp beginners fico sd basis hana sapui5 bods hr security tutorial bi/bw mm solution manager bpc qm successfactors co payroll sap courses web expand apache java php sql server angularjs jsp pl/sql uml asp.net kotlin postgresql vb.net c linux python vbscript c# mariadb reactjs web services c++ ms access ruby & rails wpf codeigniter mysql scala sqlite dbms node.js sql perl javascript must learn expand accounting embedded systems operating system algorithms ethical hacking pmp android excel tutorial photoshop blockchain go programming project management business analyst iot reviews build website itil salesforce cloud computing jenkins seo cobol mis software engineering compiler design movie vba courses networking vpn big data expand aws hive power bi big data informatica qlikview cassandra microstrategy tableau cognos mongodb talend data warehousing nifi zookeeper devops obiee pentaho hbase live project expand live agile testing live selenium project live hp alm live selenium 2 live java project live security testing live mobile testing live testing project live payment gateway live testing 2 live php project live telecom live projects hub live uft/qtp testing live python project live seo project ai expand artificial intelligence pytorch data science r programming keras tensorflow nltk search toggle menu apache tutorials for beginners byalyssa walker hours updatedoctober 22, 2022 what is apache? apache is a remarkable piece of application software. it is the most widely used web server application in the world with more than 50% share in the commercial web server market. apache is the most widely used web server application in unix-like operating systems but can be used on almost all platforms such as windows, os x, os/2, etc. the word, apache, has been taken from the name of the native american tribe ‘apache’, famous for its skills in warfare and strategy making. it is a modular, process-based web server application that creates a new thread with each simultaneous connection. it supports a number of features; many of them are compiled as separate modules and extend its core functionality, and can provide everything from server side programming language support to authentication mechanism. virtual hosting is one such feature that allows a single apache web server to serve a number of different websites. what you will learn: what is apache? how to install apache install apache:linux platform install apache from source what is virtual host? types of apache virtualhost name-based virtual host ip-based virtual host what apache needs to run php file? php handlers in apache how to run ruby with apache how to secure apache web server 1) hiding apache version and os information: 2) disable directory listing 3) disabling unnecessary modules 4) restricting access to files outside the web root directory 5) using mod_evasive to rebutting the dos attack 6) using mod_security to enhance apache security 7) limiting request size apache log format three directives available in apache config file i.e. two types of apache log format common log format combined log format configure your very first production web sever the solution using cpanel or similar software how to install apache there are numerous ways of installing the package or application. there are enlisted below – one of the features of this open source web application is that anyone can make installer as per their own environment. this has allowed various vendors like debian, red hat, freebsd, suse etc. to customize the file location and configuration of apache taking into account other installed applications and base os. apart from installing it from a vendor based installer, there is always the option of building and installing it from the source code. installing apache from source file is a platform independent & works for all os. the apache web server is a modular application where the administrator can choose the required functionality and install different modules as per his/her requirement. all modules can be compiled as a dynamic shared objects (dso is an object file that could be shared by multiple apps while they are executing) that exists separately from the main apache file. the dso approach is highly recommended, it makes the task of adding/removing/updating modules from the servers configuration very simple. install apache:linux platform on red hat or rpm based systems if you are using an rpm (redhat package manager is a utility for installing application on linux systems) based linux distribution i.e. red hat, fedora, centos, suse, you can install this application by either vendor specific package manager or directly building the rpm file from the available source tarball. you can install apache via the default package manager available on all red hat based distributions like centos, red hat and fedora. [root@amsterdam ~]# yum install httpd the apache source tarball could be converted into an rpm file using the following command. [root@amsterdam ~]# rpmbuild -tb httpd-2.4.x.tar.bz2 it is mandatory to have -devel package installed on your server for creating .rpm file from source. once you convert the source file into an rpm installer, you could use the following command to install apache. [root@amsterdam ~]# rpm –ivh httpd-2.4.4-3.1.x86_64.rpm after the installation the server does not start automatically, in order to start the service, you have to use any of the following command on fedora, centos or red hat. [root@amsterdam ~]# /usr/sbin/apachectl start

[root@amsterdam ~]# service httpd start

[root@amsterdam ~]# /etc/init.d/httpd start install apache from source installing apache from the source require the –devel package to be installed on your server. .you can find the latest available version of apache, you can download it here . once you download the source file move it to the /usr/local/src folder. [root@amserversterdam ~] cd /usr/local/src

[root@amserversterdam ~] gzip -d httpd-2.2.26.tar.gz

[root@amserversterdam ~] tar xvf httpd-2.2.26.tar

[root@amserversterdam ~] httpd-2.2.26 in order to see all configuration option available for apache, you can use ./configure –help option. the most common configuration option is –prefix={install directory name}. [root@amserversterdam ~]./configure --help

[root@amserversterdam ~]./configure –prefix=/usr/local/apache –enable-so

[root@amserversterdam ~] make

[root@amserversterdam ~] make install the above example shows the compilation of apache within the /usr/local/apache directory with the dso capability. the –enable-so option, can load required modules to apache at run time via the dso mechanism rather than requiring a recompilation. once the installation completes, you can browse the web servers default page with your favorite browser. if firewall is enabled on your server, you must have to make exception for port 80 on your os firewall. you can use the following command to open port 80. iptables -i input -p tcp --dport 80 -j accept service iptables save you can see the default apache2 welcome screen by browsing your server ip address. what is virtual host? an apache web server can host multiple websites on the same server. you do not need separate server machine and apache software for each website. this can achieved using the concept of virtual host or vhost. any domain that you want to host on your web server will have a separate entry in apache configuration file. types of apache virtualhost name-based virtual host address-based or ip based virtual host and. name-based virtual host name based virtual hosting is used to host multiple virtual sites on a single ip address. in order to configure name based virtual hosting, you have to set the ip address on which you are going to receive the apache requests for all the desired websites. you can do this by namevirutalhost directive within the apache configuration i.e. httpd.conf/apache2.conf file. apache virtual host example: namevirtualhost *:80

<virtualhost 192.168.0.108:80>

serveradmin webmaster@example1.com

documentroot /var/www/html/example1.com      

servername www.example1.com

</virtualhost>

<virtualhost 192.168.0.108:80>

serveradmin admin@example2.com

documentroot /var/www/html/example2.com

servername www.example2.com

</virtualhost> you can add as many virtual hosts, as per your requirement. you can check your web configuration files with: [root@amsterdam ~]#httpd –t
syntax ok if the configuration file has some wrong syntax, it will throw an error [root@115 conf.d]# httpd -t

syntax error on line 978 of /etc/httpd/conf/httpd.conf:

invalid command '*', perhaps misspelled or defined by a module not included in the server configuration ip-based virtual host in order to setup ip based virtual hosting, you need more than one ip address configured on your server. so, the number of vhost apache will depend onnumber of ip address configured on your server. if your server has 10 ip addresses, you can create 10 ip based virtual hosts. in the above diagram two websites example1.com and example2.com were assigned different ips and are using ip-based virtual hosting. listen 192.168.0.100:80

<virtualhost 192.168.10.108:80>

serveradmin webmaster@example1.com

documentroot /var/www/html/example1.com      

servername www.example1.com

</virtualhost>

<virtualhost 192.168.10.109:80>

serveradmin admin@example2.com

documentroot /var/www/html/example2.com

servername www.example2.com

</virtualhost> what apache needs to run php file? running php files on apache needs mod_php enabled on your server. it allows apache to interpret .php files. it has php handlers that interpret the php code in apache and send html to your web server. if mod_php is enabled on your server, you will have a file named php.conf in /etc/httpd/conf.d/ directory. you can also check it with: httpd -m | grep "php5_module" the output will be similar to: php handlers in apache mod_php cgi fastcgi suphp mod_phpis the oldest php handler, it makes php part of apache and does not call any external php process. this module is installed by default in every linux distribution repository, so enabling/disabling this module is very easy. if you are using fastcgi as your php handler, you can set multiple versions of php to be used by different accounts on your server. fastcgi i.e. mod_fastcgi is an extension of mod_fcgid, where as mod_fcgid is a high performance alternative of cgi i.e. mod_cgi . it starts sufficient number of instances of cgi to handle concurrent web requests. it also uses suexec to support different users with their own instances of php and improves web security. running ruby files on apache needs mod_ruby to be enabled. apache can also handle ruby files through fastcgi. it is possible to use multiple version of ruby with the help of mod_fcgid i.e. fastcgi. you can also install apache passenger and configure apache to use it for serving ruby pages. (phusion passenger also known as “passenger” is a free web server module that is designed to integrate with apache and nginx ) steps to install mod_ruby on your server – cd /tmp

wget http://www.modruby.net/archive/mod_ruby-1.2.6.tar.gz

tar zxvf mod_ruby-1.2.6.tar.gz

cd mod_ruby-1.2.6/                    

./configure.rb --with-apr-includes=/usr/include/apr-1

make

make install how to run ruby with apache we have to add the mod_ruby module to the apache configuration i.e. /etc/httpd/conf.d/ruby.conf and add the following line. loadmodule ruby_module modules/mod_ruby.so if you like to enable or disable these modules, you have to edit the apache configuration file and comment or uncomment these modules, if the web server is already compiled with these modules. how to secure apache web server securing your web server is very important, it means allowing others to see only the intended information & protecting your data and restricting access. these are common things that enhance your apache web servers’ security. 1) hiding apache version and os information: apache displays its version and the name of the operating system in errors as shown in below screenshot. a hacker can use this information to launch an attack using the publicly available vulnerabilities in the particular version of the server or os. in order to prevent apache webserverfromdisplaying this information, we have to modify “server signature” option available in the apache configuration file. by default, it is “on”, we need to set it “off”. vim /etc/httpd/conf/httpd.conf serversignature off

servertokens prod we have also set “servertokens prod” that tells the web server to return only apache and suppress the os major and minor version after modifying the configuration file, you have to restart/reload your apache web server to make it effective. service httpd restart 2) disable directory listing if your document root directory does not have an index file, by default your apache web server will show all the content of the document root directory. this feature could be turn off for a specific directory through “options directive” available in the apache configuration file. <directory /var/www/html>

    options -indexes

</directory> 3) disabling unnecessary modules it is good practice to disable all unnecessary modules that are not in use. you can see list of enabled module available in your apache configuration file – [root@amsterdam ~]#httpd –m

perl_module (shared)

php5_module (shared)

proxy_ajp_module (shared)

python_module (shared)

ssl_module (shared) many of the listed modules can be disabled likemod_imap, mod_include, mod_info, mod_userdir, mod_autoindex, as they are hardly used by any production web servers. vi /etc/httpd/conf/httpd.conf

#loadmodule auth_digest_module modules/mod_auth_digest.so once you commented the module, save the file. restart apache services with following command. /etc/init.d/httpd restart 4) restricting access to files outside the web root directory if you like to make sure that files that is outside the web root directory are not accessible, you have to make sure that the directory is restricted with “allow” and “deny option” in your web server configuration file. <directory/>

options none

allowoverride none

order deny,allow

deny from all

</directory> once you restrict acess outside the web root directoy, you will not be able to access any file located on any other folder on your web server, you will get 404 return code. 5) using mod_evasive to rebutting the dos attack if you like to protect your web server from dos (i.e. denial of service) you must enable the module mod_evasive. it is a third party module that detects dos attack and prevents the attack from doing as much damage as it would do if left to run its course. it could be downloaded here. download the above file 6) using mod_security to enhance apache security this module works as a firewall for apache and allows you to monitor traffic in real time. it also prevents the web server from brute force attacks. the mod_security module could be installed with the default package manager of your distribution. 7) limiting request size apache does not have any restriction on the total size of the http request that could lead to a dos attack. you can limit the request size of an apache directive “limitrequestbody” with the directory tag. the value could be set anything from 0 to 2 gb (i.e. 2147483647 bytes) as per your requirement. <directory "/var/www/html/uploads">

   limitrequestbody 512000

</directory> apache log format apache logs provide detailed information that help to detect common issues with server. in order create access logs, mod_log_configmodule must be enabled. three directives available in apache config file i.e. transferlog: creating a log file. logformat : specifying a custom format. customlog : creating and formatting a log file. transferlog directive is available in the apache configuration file and it rotates virtual host log files as per set parameters. <virtualhost www.example.com>

  serveradmin webmaster@example.com

  documentroot /usr/www/example/httpd/htdocs/

  servername www.example.com

  serveralias example.com www.example

  errorlog /usr/www/example/httpd/logs/error_log

  transferlog/usr/www/example/httpd/logs/accesslog

  customlog /usr/www/example/httpd/logs/accesslog combined

</virtualhost> two types of apache log format common log format combined log format. you can enable them by editing the apache configuration file i.e. apache2.conf (debian/ubuntu) or httpd.conf (rpm based systems) file common log format logformat "%h %l %u %t \"%r\" %>s %b" common

customlog logs/access_log common common log generated by apache [wed oct 11 14:32:52 2000] [error] [client 127.0.0.1] client denied by server configuration: /export/home/live/ap/htdocs/test combined log format logformat "%h %l %u %t \"%r\" %>s %b \"%{referer}i\" \"%{user-agent}i\"" combined

customlog log/access_log combined here, %h is the remote host %l is the identity of the user determined by identd %u is the user name determined by http authentication %t is the time the server finished processing the request. %r is the request line from the client. (“get / http/1.0”) %>s is the status code sent from the server to the client (500, 404 etc.) %b is the size of the response to the client (in bytes) referer is the page that linked to this url. user-agent is the browser identification string. combined log generated by apache: 199.187.122.91 - - [06/mar/2014:04:22:58 +0100] "get /robots.txt http/1.1" 404 1228 "-" "mozilla/4.0 (compatible; msie 6.0; windows nt 5.1; sv1; .net clr 2.0.50727)" custom log creates separate log file for each virtual host on your server. it needs to be specified in the virtual host section of the config file. you can see below mentioned virtual host configuration, generated log will be custom for that virtual host and the format will be combined. configure your very first production web sever 1. in order to have a running production web server, you need a dedicated node (physical/virtual or cloud instance) running linux/unix, windows, macos etc. 2. the web server must have a direct network connection and a staticip address configured on it. 3. it needs to have all the modules required for running web pages. if a web server processes php pages, it needs to have php module enabled. it also needs to have a good antivirus application configured and running for securing the web server from malware or virus attacks. you also need mechanism to update the configured antivirus/anti malware application on regular basis without any manual intervention in order to get maximum benefit from them. if you have hundreds of domains to be hosted on your web server, you must have to implement limitations on file system quota for each domain, number of databases each domain can create, number of email accounts per domain etc. if your web server has been setup for shared hosting services, users on your web server needs to be restricted. a shared hosting user should have least user privilege so that he does not damage important files & break the entire server. apache does not provide any such functionality and needs different third party applications, customization of os to achieve this. if you are adding a new domain on your web server, it needs editing hundreds of configuration file to enable all features for the added domain. if one of the hosted domains requires different php setting than rest of the domains, implementing this in core apache web server is very complex and needs customization of your web server in great extent. a production web server needs a firewall to block unwanted traffic that could cause high load on your server. implementing iptable rules with command line is very complex. it needs expertise of core linux/unix environment to write effective firewall rules for blocking unwanted traffic. iptable is based on netfilter module; it is an os level firewall that allows an administrator to create rules for incoming/outgoing traffic on the server. a production web server requires several different applications like email, ftp for file upload, domain name system for parked domains. managing all these applications on a core linux/unix system requires expertise on the respective technologies. so, one can say that managing a web server for multiple domains is very complex task and requires editing hundreds of configuration file, customizing each application to fulfill the desired result. troubleshooting any miss configuration will be very difficult for beginners. the solution using cpanel or similar software cpanel provide a graphical way of managing your web server. it is meant to provide mass hosting services that is easy to use and configure. cpanel has reduced the technical barriers to entry into the hosting and web server management. it makes complex task easier, it provides many useful and easy to use web interfaces that perform common system administration tasks required to operate a web server. cpanel compiles its own version of software. if you have to recompile your web server i.e. apache on normal linux platform, you have to manually select/search the module that is required. cpanel provides easyapache functionality that is a script based web server compilation method. it not only provides you web services but also mail, dns, ftp and many more services that is required for your web application. a task that needs expertise on core linux/unix based hosting like installing ssls, recompiling apache with different php modules, updating web security, configuring effective iptable rules, adding ftp users, creating mail accounts for each domain, scanning your document root with antivirus and creating databases are easy to complete with cpanel. it provides a lot of scripts that fixes, install and troubleshoot common administrative tasks. it provides a backup and restore functionality eliminating the need to manually copy files to backup storage. if you are backing up your domain, cpanel will create a tar file that will contain document root folder, email accounts and mails, ftp accounts, databases, dns records and other applications. it also provides a robust documentation, andhas a very big community of users where you could discuss and get solution of your issues. so, one can say that cpanel is a best application for managing your web server with required features. it provides you, easy to use interface for managing your domain and a mechanism to avoid complexity of managing core web server. there are many competing products to cpanel like plesk, ispconfig, ajenti, kloxo, open panel, zpanel etc. you might like: 10 best (really free) website hosting & domain sites (2022) 13 best website change detection & monitoring tools (2022) 17 best (really free) password managers in 2022 10 best free ad blockers (adblock) extension for chrome 15 best free image hosting sites (upload & share) in 2022 post navigation report a bug previous prev next continue top tutorials about about us advertise with us write for us contact us python testing hacking career suggestion sap career suggestion tool software testing as a career interesting ebook blog quiz sap ebook sap java sql execute online execute java online execute javascript execute html execute python selenium cryptocurrency vpns © copyright - guru99 2022 privacy policy | affiliate disclaimer | tos scroll to top home testingexpand child menu expand agile testing junit quality center(alm) bugzilla hp loadrunner rpa cucumber software testing sap testing database testing mobile testing selenium etl testing mantis soapui jmeter postman test management jira qtp testlink sapexpand child menu expand abap crm pi/po apo crystal reports pp beginners fico sd basis hana sapui5 bods hr security tutorial bi/bw mm solution manager bpc qm successfactors co payroll sap courses webexpand child menu expand apache java php sql server angularjs jsp pl/sql uml asp.net kotlin postgresql vb.net c linux python vbscript c# mariadb reactjs web services c++ ms access ruby & rails wpf codeigniter mysql scala sqlite dbms node.js sql perl javascript must learnexpand child menu expand accounting embedded systems operating system algorithms ethical hacking pmp android excel tutorial photoshop blockchain go programming project management business analyst iot reviews build website itil salesforce cloud computing jenkins seo cobol mis software engineering compiler design movie vba courses networking vpn big dataexpand child menu expand aws hive power bi big data informatica qlikview cassandra microstrategy tableau cognos mongodb talend data warehousing nifi zookeeper devops obiee pentaho hbase live projectexpand child menu expand live agile testing live selenium project live hp alm live selenium 2 live java project live security testing live mobile testing live testing project live payment gateway live testing 2 live php project live telecom live projects hub live uft/qtp testing live python project live seo project aiexpand child menu expand artificial intelligence pytorch data science r programming keras tensorflow nltk toggle menu close search for: search
