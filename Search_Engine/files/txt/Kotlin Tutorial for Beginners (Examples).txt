https://www.guru99.com/kotlin-tutorial.html::kotlin tutorial for beginners (examples) skip to content home testing expand agile testing junit quality center(alm) bugzilla hp loadrunner rpa cucumber software testing sap testing database testing mobile testing selenium etl testing mantis soapui jmeter postman test management jira qtp testlink sap expand abap crm pi/po apo crystal reports pp beginners fico sd basis hana sapui5 bods hr security tutorial bi/bw mm solution manager bpc qm successfactors co payroll sap courses web expand apache java php sql server angularjs jsp pl/sql uml asp.net kotlin postgresql vb.net c linux python vbscript c# mariadb reactjs web services c++ ms access ruby & rails wpf codeigniter mysql scala sqlite dbms node.js sql perl javascript must learn expand accounting embedded systems operating system algorithms ethical hacking pmp android excel tutorial photoshop blockchain go programming project management business analyst iot reviews build website itil salesforce cloud computing jenkins seo cobol mis software engineering compiler design movie vba courses networking vpn big data expand aws hive power bi big data informatica qlikview cassandra microstrategy tableau cognos mongodb talend data warehousing nifi zookeeper devops obiee pentaho hbase live project expand live agile testing live selenium project live hp alm live selenium 2 live java project live security testing live mobile testing live testing project live payment gateway live testing 2 live php project live telecom live projects hub live uft/qtp testing live python project live seo project ai expand artificial intelligence pytorch data science r programming keras tensorflow nltk search toggle menu kotlin tutorial for beginners (examples) byjames hartman hours updatednovember 5, 2022 what is kotlin? kotlin is an open-source statically typed programming language that runs on java virtual machine (jvm). it combines object oriented programming (oops) and functional programming in unrestricted, self-sufficient, and distinctive platforms. it also allows the twinning of functionalities by miniature codes. kotlin is a general-purpose programming language which was designed by jetbrains. in this kotlin tutorial for beginners, you will learn kotlin programming language basics: what is kotlin? history of kotlin reasons of why kotlin is created features of kotlin kotlin environment setup architecture of kotlin kotlin variable data types in kotlin kotlin operators kotlin arrays kotlin strings kotlin collection kotlin functions exception handling in kotlin kotlin null safety kotlin oops the present & future of kotlin kotlin vs java history of kotlin here, are important landmarks from the history of kotlin: year event 2016 kotlin v1.0 was launched 2017 announcement of google on the first-class support of kotlin in android 2018 kotlin v1.2 comes with add on distributing codes between jvm and javascript 2019 google announced kotlin as its preferred programming language for android application developers 2021 on september 20, 2021, kotlin v1.5.31 was launched. reasons of of using kotlin here, are some important reasons why kotlin is used widely: kotlin is a statically-typed language which is very easy to read and write. kotlin programs do not require semicolons in their program. this makes the code easy and more readable. this languare allows exchange and use of information from java in various ways. moreover, java and kotlin code can co-exist in the same project. kotlin’s type system is aimed to eliminate nullpointerexception from the code. it’ll take you less time to write new code in kotlin. it’s even easier to deploy kotlin code and to maintain it at scale. features of kotlin here are a few features of the kotlin that will make you sure of the progress path of the programming language. trimmed coding: kotlin is an oops-based programming language where code line can be trimmed up to 40 % that which makes kotlin an ideal choice for software or web development. open-source: kotlin for android utilizes jvm and combines the features of oops and functional-oriented programming. fast compilation: it is easy to compile the code when working with kotlin that results in better performance for android development, and it will also explain which type of data function can be used in the entire code. extension functions: kotlin can support a variety of extension functions without making any changes to the code. it helps in making existing code more appealing and magnificent for developers. for example: fun string.removefirstlastchar():
string = this.substring(1, this.length -1)
 this code will assist in trimming down the first and the last character of the string, we can apply it as: val string1 = "today is cloudy."
val string2 = string1.removefirstlastchar()
 null safety: in kotlin, the system distinguishes between null references and not null references as shown in below kotlin example. for example, a string variable cannot hold null: var string1: string = "today is sunday"
string1 = null  // compilation error
to permit null, we can adjoin the nullable variable :
var string2: string? = "today is sunday"
string2 = null
print(string2)
 interoperable: kotlin code can be used by java, and java codes can be used with kotlin. so, if you have knowledge about oops programming, it is easy to switch to kotlin’s development. also, if there are some applications written in java, then they can be used with kotlin’s environment. robust tools: like java, kotlin code can also be written using ide or using the command-line interface. it is easy to work with ide, and syntax errors are also reduced dramatically. at the same time, when you are working with a command-line interface, code has to be compiled first. smart cast: smart casting basically helps to cut down the application costs and improves its speed or performance. it works on managing the efficiency of code using type casting or immutable values. for example, if the string is identified, then it’s length and count and can be found with the help of smart cast function: val string1: any = "today is monday"
when(string1)
{
is string  -> string1.length
is int -> string1.inc()
}
 low cost of adoption: kotlin is preferred by enterprises because of its lost cost of adoption. most importantly, it is easy to learn by developers, especially having a programming background. kotlin environment setup following are the steps which help you in setting up a working environment by installing kotlin. step 1) install java as we have discussed earlier that kotlin is based on java, so you have to install java first when planning to adopt kotlin. refer our java installation tutorial. step 2) install java ides luckily, there are multiple java ides to choose from. here we have given download links to make things a little easier for you. to download the eclipse, click here. to download the netbeans, click here. to download the intellij, click here. in this kotlin tutorial, we will use eclipse. step 3) install kotlin for installing kotlin in eclipse, go to the help section in eclipse and click the eclipse marketplace option. now, type the kotlin keyword into the search box. click on go option to list the plugin. it will give you a link of kotlin plug-in, you need to install the plug-in from the given link. please restart the eclipse ide, once the installation is complete. you can find a shortcut icon in the top right corner of eclipse ide. it is a quick access method. another way of accessing kotlin in eclipse ide is, go to the windows, perspectives, open perspectives, then choose others option. here, you can check a list of plugins installed later, as given below. once, you have verified the kotlin installation, let us create the first kotlin program in the next step. step 4) first kotlin program start with your first kotlin project. from the file menu, choose the new option, then select others and start with a new kotlin project from the list. now, you have to define a name for the project, and you are ready to work with kotlin. with these simple steps, it is easy downloading eclipse and kotlin on your system and write your first kotlin program right away. architecture of kotlin a well-built architecture is important for an application to scale up its features and meet the expectations of the end-user base. kotlin has its own peculiar and distinctive architecture to allocate the memory and to get quality outcomes for the developers and end-users. kotlin’s coroutines and classes architect the core in such a way to produce less boilerplate code, amplify the performance, and reinforce the efficiency. there are a variety of scenarios where the kotlin compiler can react differently, especially whenever it is earmarking various kinds of languages. architecture of kotlin in the architecture diagram, it is clear that code execution is done in three easy steps. in the first step, “.kt” or kotlin file is added to the compiler. in the second step, kotlin compiler converts the code into bytecode. in the third step, bytecode is put into java virtual machine and executed by the jvm. when a couple of byte coded file operates on jvm, they kindle the mutual communication among themselves, which is why the feature in kotlin called interoperability for java ook birth the transpiring of kotlin to javascript happens when kotlin targets javascript. when the javascript’s target is chosen, any code of kotlin that is a part of the library that sails with kotlin is than spilled with javascript. however, the java development kit(jdk) or any java library used is excluded. a non-kotlin file is not taken into consideration during such operation. while targeting javascript .kt file is converted into es5.1 by kotlin compiler to generate a consistent code for javascript. kotlin compiler endeavors an optimal size output, interoperability with existing module, same functionality with the standard library, and output that is javascript readable. it is clear from the discussion that kotlin compilers can create a more efficient, competent, and independent code that further results in a high-performing software product. kotlin variable variables are used to store data to be manipulated and referenced in the program. it is fundamentally a unit of storing data and labeling it waits for an expository alias so that the program is simple to read and easy to understand. in other words, we can say that variables are the containers to collect information. in kotlin, all the variables should be declared. however, if any variable is not declared, then it pops out to be a syntax error. also, the declaration of the variable determines the type of data we are allowing to store in the variable. in kotlin, variables can be defined using val and var keywords. here is the syntax of declaring variables in kotlin: var day = "monday"
var number = 3
 here, we have declared the local variable day whose value is “monday’ and whose type is string and another local variable number whose value is 3 and whose type is int because here the literal is of the type integer that is 3. local variables are customarily declared and initialized simultaneously. we can also perform certain operations while initializing the kotlin variable. we can perform an operation on the variable of the same data type, as in here num1 and num2 both are of the same data type that is int, whereas day is of the string data type. ergo, it will show an error. here is one another technique how can you define variables in kotlin. var day : string = "guru99"
var num : int = 100
 let see how var and val keywords are different from each other. var : var is like a generic variable used in any programming language that can be utilized multiple times in a single program. moreover, you can change its value anytime in a program. therefore, it is known as the mutable variable. here is an example of mutable variable in kotlin: var num1 = 10
var num2 = 20
num1 = 20
print(num1 + num2) // output : 40
 here the value of num1 that is 20, is overwritten by the previous value of num1 that is 10. therefore the output of num1 + num2 is 40 instead of 30. val : val is like a constant variable, and you cannot change its value later in the program, which neither can be assigned multiple times in a single program and can be used only once in a particular program. ergo, it is known as an immutable variable. here is an kotlin program example of immutable variables in kotlin: val num1 = 10
var num2 = 20
 here, the value of num1 that is 10 cannot be overwritten by the new value of num1 that is 20, as it is of val type that is constant. therefore, the output is 30 instead of 40. note: in kotlin, immutable variables are preferred over mutable variables. data types in kotlin data types are set of relatable values and describe the operations that can be operated on them. similar to other programming languages, kotlin also has its predefined set of data types like int, boolean, char, double, etc. in kotlin, every data type is considered as an object. now in this kotlin basic tutorial, let’s dive deeper into the predefined data types used in kotlin. numbers : kotlin serves a set of built-in data types known as numbers, which are sub-categorize as integers and floating-point numbers. integers : integers are the category of numbers that has four types: type size (bits) min value max value byte 8 -128 127 short 16 -32768 32767 int 32 -2,147,483,648 (-231) 2,147,483,647 (231 – 1) long 64 -9,223,372,036,854,775,808 (-263) 9,223,372,036,854,775,807 (263 – 1) floating point numbers : floating point numbers are the non-integer numbers that carry some decimal values. float: float is a 32- bit single-precision floating-point value. example: var: float x = 3.25600 double: double is a 64- bit double – precision floating point value. example: var: double y = 2456.345587 booleans : booleans data type in kotlin is significant to represent the logical values. there are only two possible values in boolean that is either true or false. for example: val day = true val day2 = false character : characters in kotlin are represented with the help of the keyword called char. in kotlin, single quotes represent the declaration of char. in java, char are sometimes used as numbers that is not possible in kotlin. for example: val onechar = 'x'
print(onechar) //  output : x
val onedigit = '7'
print(onedigit) // output : 7
 kotlin type conversion or kotlin type casting type conversion is a procedure of converting one type of data variable into another data type variable. it is enormously, also known as type casting. eminently, in java, implicit type of type conversion or implicit type of typecasting of a smaller data type to larger data type is supported. for example : int abc = 15;
long bcd = abc; // compiles successfully however, in kotlin, implicit conversion of a smaller data type to a larger data type is not at all supported that is int data type cannot be converted into long data type implicitly. for example : var abc = 15
val bcd : long = abc // error
 however, in kotlin, type conversion is done explicitly. here comes the guidance of helper functions that guides the conversion of one data type variable to another. there are certain helper function which are pre – owned for the conversion of one data type to another : toint() tobyte() toshort() tochar() tolong() tofloat() todouble() for example : var abc = 15
val bcd : long = abc.tolong() // compiles successfully
 kotlin operators operators are momentous and special characters or symbols that assures the operations in operands that have variables and values. in kotlin, there is a set of operators that are used in different operations like arithmetic operations, assignment operations, comparison operations, etc. arithmetic operators : arithmetic operators are used for addition, subtraction, multiplication, division, and modulus. operator meaning + addition (also used for string concatenation) – subtraction operator * multiplication operator / division operator % modulus operator for example: var x = 10
var y = 20
var z = ( ( x + y ) * ( x + y ) ) / 2     
 here the output of the following code is 45. comparison operators : comparison operator is used to compare two values, two variables or two numbers. it is used with the greater than symbol( > ), less than symbol( < ) and equal to symbol( ==), not equal to symbol( != ), greater than equal to symbol( >= ), less than equal to symbol(<= ). it always results in true or false. for example: var x = 10
var y =20
var z = x < y // output : true
var w = x > y // output : false
var m = x == y // output : false
 assignment operators : assignment operators are used to assign the arithmetic operated values. it is used with the symbols like +=, -=, *=, /=, %=. for example: var x = 10
var y = 20
var x + = y // output : 30
var y - = x // output : 10
var x * = y // output : 200
 increment and decrement operators : increment and decrement operators are used to increment and decrement the values of the variable or number. it is used with the help of symbols like ++ and —. there are two types of increment and decrement that are pre-increment ++a, post-increment a++, pre decrement –b, post decrement b–. for example: var a = 10
var b = 20
var c = a++ // output: 11
var d = b— //output : 19     
 kotlin arrays an array is the homogenous set of data types and is one of the most fundamental data types which is used to store the same types of data in the contiguous memory location. an array is significant for the organization of data in any programming language so that multiple data stored ant a single place is easy to search or sort. in kotlin, arrays are a mutable collaboration of the same data types rather than being native data types. here are certain properties of an array in kotlin the size of the array cannot be changed once declared. arrays in kotlin are mutable. arrays are stored in contiguous memory locations. an array can be accessed with the help of indexes like a[1], a[2], et – cetera. the index of an array starts with zero that is a[0]. in kotlin, an array can be defined in two different methods by using arrayof() function : in kotlin, there is a major usage of library functions. one such library function is arrayof() function, which is used to define an array by passing the values of the variables to the function. for example: implicit type declaration of array using arrayof() function val x = arrayof(1,2,3,4,5,6,7,8,9)
 for example: explicitly type declaration of array using arrayof() function. val y = arrayof<int>(1,2,3,4,5,6,7,8,9)
 by using array constructor : in kotlin, there is a class with the name of array. therefore, it is feasible to use an array of the constructor to create an array. the array in constructor holds two major parameters. what is the index of an array in kotlin? the function where an array index is acceptable to return the initial value of the index. for example: val abc = array(7 , { i -> i*1})
 here, the value of array is 7 and lambda expression is used to initialize the values of the element. there are also various methods to access and modify the arrays using certain functions. therefore, there are two member functions get() and set(), which are used to access class array’s objects. for example: val x = arrayof(10,20,30,40,50,60,70,80,90)
val y = x.get(0) // output 10
 here, the output is 10 since the value at the index 0 of array is 10 note : get() takes only single values for example: val x = arrayof(10,20,30,40,50,60,70.80.90)
val y = x.set(2, 3) // output : 30 40 here, the output is 30 and 40 since the value at the index 2 of array is 30 and at index 3 it is 40. note: set() takes multiple values of an array. kotlin strings a string is a basic data type in any programming language. a string is nothing but a sequence of characters. the string class represents character strings. in kotlin, all strings are objects of the string class, which means string literals are implemented as instances of the class. syntax:  val mystring = "hey there!" kotlin collection a collection contains several objects of a similar type, and these objects in the collection are called elements or items. collection can help to store, retrieve, manipulate, and aggregate data. types of collections: immutable collection this type of collection support read-only functionalities. one cannot modify its elements. methods include: list – listof() and listof<t>() set – setof() map – mapof() mutable collection it supports both read and write functionality. methods include list – mutablelistof(),arraylistof() and arraylist set – mutablesetof(), hashsetof() map – mutablemapof(), hashmapof() and hashmap kotlin functions functions in any programming language is a group of similar statements which is designated to perform a specific task. functions allow a program to break it into various small code blocks. this division of code increases the readability of code, reusability of code, and makes a program easy to manage. as kotlin is known as a statically typed language. here, the ‘fun’ keyword is used to declare a function. in kotlin, there are two types of functions which solely depends upon its availability in the standard library or user definition. they are: standard library function user-defined function kotlin functions now, let us discuss them in detail with kotlin code examples. standard library function they are built-in library functions that can be defined implicitly and available for use. for example 2: fun main(args: array<string>){  
var number = 9  
var result = math.sqrt(number.todouble())  
print("$result")  
}  
 output: 3.0 sqrt() is a function defined in the library which returns the square root of a number. print() function prints message to a standard output stream. user-defined function as the name suggests, these functions are usually created by users, and they can be used for advanced programming. here, functions are declared using the ‘fun’ keyword. for example 3: fun functionname(){
//body of the code
}
 here, we call the function to run codes inside the body functionname() kotlin function examples: fun main(args: array<string>){  
    sum()  
    print("code after sum")  
}  
fun sum(){  
    var num1 =8  
    var num2 = 9  
    println("sum = "+(num1+num2))  
}  
 output: sum = 17 code after sum exception handling in kotlin exception in programming is defined as a runtime problem which occurs in the program, leading it to terminate. this issue can occur due to less memory space, array out of bond, conditions like division by zero. to curb these types of issues in code execution, exception handling is used. exception handling is defined as the technique which handles the runtime problems and also maintains the program flow during execution. kotlin uses the ‘throw’ expression to throw an exception object. here all exception classes are descendants of class throwable. throw myexception(“throws exception”) there are four types of exceptions in exception handling. they are: try – this block contains statements which might create the exception. it is always followed by either catch or finally or both. catch – it catches an exception thrown from the try block. finally – it always checks whether the exception is handled or not. throw – it is used to throw an exception explicitly. try catch: in try-catch block in exception handling, try block encloses the code, which may throw an exception and catch block catches the expression and handles it. syntax of try catch block: try{    
//code with exception    
}catch(e: someexception){  
//code handling exception  
}    
 syntax of try with finally block try{    
//code with exception    
}finally{  
// code finally block  
}   
 finally: in kolin, finally block always checks whether the exception is handled or not, making it a very important statement of exception handling. for example 4: in this code snippet, the exception occurs, and it is handled. fun main (args: array<string>){  
    try {  	
        val data =  9/ 0  
        println(data)  
    } catch (e: arithmeticexception) {  
        println(e)  
    } finally {  
        println("finally block executes")  
    }  
    println("write next code")  
}  
 output: java.lang.arithmeticexception: / by zero
finally block executes
write next code
 throw: throw block throws an explicit exception. moreover, it is used to throw custom exceptions. syntax: throw someexception()

throw someexception() example: fun main(args: array<string>) {
    try{
        println("exception is not thrown yet")
        throw exception("everything is not well")
        println("exception is thrown")
    }
    catch(e: exception){
        println(e)

    }
    finally{
        println("you can't ignore me")
    }
}
 output: kotlin null safety the types of systems that support kotlin majorly distinguishes among the references that can carry nullable references, and the ones cannot carry nullable references. kotlin is a null safety language aimed to eliminate the null pointer exception or null reference from the code, which is deliberately known as a billion dollar mistake. the most conventional stumbling block of many programming languages is that while accessing a member of a null reference, it results to be a nullpointerexception, which could be because of !! operator or this constructor used somewhere else and passed at another point of code. the nullable property requires confirmation for the null check every time prior to its utilization. in kotlin, the system distinguishes between null references and not null references. for example, a string variable cannot hold null: for example 5: fun main(args: array<string>){
    var x: string = "guru99 is the only place where you will get maximum technical content!" // not null by default
    println("x is : $x")
    // you cannot assign null variable to not-nullable variables 
    // a=null // it will give compilation error
    var y: string? = "thanks for visiting guru99" 
// nullable variable
    println("y is : $y")
    y = null
    println("y is : $y")
}
 output: kotlin oops the object-oriented programming approach allows a complex code snippet to divide into smaller code blocks by creating objects. these objects mutually share two characteristics: state and behavior. here are some of the oops elements that we are going to discuss with kotlin code examples: class and objects constructors inheritance abstract class class in kotlin the first before creating an object, we need to define a class that is also known as the blueprint for the object. syntax: class classname {
    // property
    // member function
    ... .. ...
}
 objects in kotlin while defining a class, we only define the specifications for the object, no other parameter like memory or storage is allocated. syntax: var obj1 = classname() constructors in kotlin a constructor is a way to initialize class properties. it’s a member function called when an object is instantiated. but in kotlin, it works differently. there are two types of constructors in kotlin: constructors in kotlin primary constructor: optimized way to initialize a class syntax: class myclass(valname: string,varid: int) {  
    // class body  
}  
 secondary constructor: helps to add initialization logic kotlin inheritance inheritance occurs when some properties of the parent class are acquired by the child class. inheritance is allowed when two or more classes have the same properties. syntax: open class parentclass(primary_construct){
    // common code
  }class childclass(primary_construct): parentclass(primary_construct_initializ){
    // childclass specific behaviours
  }
 abstract class in kotlin an abstract class is a class that cannot be instantiated, but we can inherit subclasses from them. ‘abstract ‘ keyword is used to declare an abstract class. for example 6:   open class humanbeings { 
    open fun eat() { 
        println("all human being eat") 
    } 
} 
abstract class animal : humanbeings() { 
    override abstract fun eat() 
} 
class cat: animal(){ 
    override fun eat() { 
        println("cats also loves eating") 
    } 
} 
fun main(args: array<string>){ 
    val lt = humanbeings() 
    lt.eat() 
    val d = cat() 
    d.eat() 
} 
 output: the present & future of kotlin the present: many companies like netflix, pinterest, and corda are using kotlin to create powerful android apps. in a short duration of one year, 2016 to 2017, kotlin became highly popular with amazing programming features. in 2017, google announced kotlin as an official programming language for android development. you can quickly replace java code with kotlin as it is 100% interoperable with java and android. the future: cross-platform game development cross-platform mobile app development service-side scripting and microservices machine learning & data analysis summary: kotlin is a programming language proposed by jetbrains in 2010 for multi-platform apps under the apache 2.0 license. the name kotlin is derived after the name of kotlin island in a similar correspondence of java after the name of an island called java. in, 2016 kotlin first version v1.0 was launched kotlin programs do not require semicolons in their program. this makes the code easy and more readable. kotlin for android developers is an oops-based programming language where code line can be trimmed up to 40 % that which makes kotlin an ideal choice for software or web development. in kotlin, all the variables should be declared using var and val keywords. similar to other programming languages, kotlin also has its predefined set of data types like int, boolean, char, double, etc. in kotlin, there is a set of operators that are used in different operations like arithmetic operations, assignment operations, comparison operations, etc. in kotlin, arrays are a mutable collaboration of the same data types rather than being native data types. in kotlin, arrays are defined using two methods – arrayof () and constructors. kotlin is a null safety language that helps to remove the null pointer exception or null reference from the code, which is deliberately called a billion dollar mistake. you might like: oops concepts in java: what is, basics with examples java bufferedreader: how to read file in java with example java tutorial for beginners: learn core java programming 15 best java tools & software for developers (2022) java string contains() method: check if string contains substring post navigation report a bug previous prev next continue top tutorials about about us advertise with us write for us contact us python testing hacking career suggestion sap career suggestion tool software testing as a career interesting ebook blog quiz sap ebook sap java sql execute online execute java online execute javascript execute html execute python selenium cryptocurrency vpns © copyright - guru99 2022 privacy policy | affiliate disclaimer | tos scroll to top home testingexpand child menu expand agile testing junit quality center(alm) bugzilla hp loadrunner rpa cucumber software testing sap testing database testing mobile testing selenium etl testing mantis soapui jmeter postman test management jira qtp testlink sapexpand child menu expand abap crm pi/po apo crystal reports pp beginners fico sd basis hana sapui5 bods hr security tutorial bi/bw mm solution manager bpc qm successfactors co payroll sap courses webexpand child menu expand apache java php sql server angularjs jsp pl/sql uml asp.net kotlin postgresql vb.net c linux python vbscript c# mariadb reactjs web services c++ ms access ruby & rails wpf codeigniter mysql scala sqlite dbms node.js sql perl javascript must learnexpand child menu expand accounting embedded systems operating system algorithms ethical hacking pmp android excel tutorial photoshop blockchain go programming project management business analyst iot reviews build website itil salesforce cloud computing jenkins seo cobol mis software engineering compiler design movie vba courses networking vpn big dataexpand child menu expand aws hive power bi big data informatica qlikview cassandra microstrategy tableau cognos mongodb talend data warehousing nifi zookeeper devops obiee pentaho hbase live projectexpand child menu expand live agile testing live selenium project live hp alm live selenium 2 live java project live security testing live mobile testing live testing project live payment gateway live testing 2 live php project live telecom live projects hub live uft/qtp testing live python project live seo project aiexpand child menu expand artificial intelligence pytorch data science r programming keras tensorflow nltk toggle menu close search for: search
